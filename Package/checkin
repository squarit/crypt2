#!/usr/bin/python

import subprocess
import os
import urllib
import sys

from Foundation import *
import FoundationPlist

BUNDLE_ID = 'com.grahamgilbert.crypt'
PLIST_PATH = '/private/var/root/crypt_output.plist'

def set_pref(pref_name, pref_value):
    """Sets a preference, writing it to
        /Library/Preferences/ManagedInstalls.plist.
        This should normally be used only for 'bookkeeping' values;
        values that control the behavior of munki may be overridden
        elsewhere (by MCX, for example)"""
    try:
        CFPreferencesSetValue(
                      pref_name, pref_value, BUNDLE_ID,
                      kCFPreferencesAnyUser, kCFPreferencesCurrentHost)
        CFPreferencesAppSynchronize(BUNDLE_ID)
    except Exception:
        pass

def pref(pref_name):
    """Return a preference. Since this uses CFPreferencesCopyAppValue,
    Preferences can be defined several places. Precedence is:
        - MCX
        - /var/root/Library/Preferences/com.grahamgilbert.crypt.plist
        - /Library/Preferences/com.grahamgilbert.crypt.plist
        - default_prefs defined here.
    """
    default_prefs = {
    'KeepKey': False
    }
    pref_value = CFPreferencesCopyAppValue(pref_name, BUNDLE_ID)
    if pref_value == None:
        pref_value = default_prefs.get(pref_name)
        # we're using a default value. We'll write it out to
        # /Library/Preferences/<BUNDLE_ID>.plist for admin
        # discoverability
        set_pref(pref_name, pref_value)
    if isinstance(pref_value, NSDate):
        # convert NSDate/CFDates to strings
        pref_value = str(pref_value)
    return pref_value

def GetMacName():
    theprocess = ['scutil', '--get', 'ComputerName']
    thename = subprocess.Popen(theprocess, stdin=subprocess.PIPE,
    stdout=subprocess.PIPE).communicate()[0]
    thename = thename.strip()
    return thename

def escrow_key(plist):
    server_url = pref('ServerURL')
    if server_url == None:
        return False
    if server_url.endswith("/"):
        theurl = server_url+"checkin/"
    else:
        theurl = server_url+"/checkin/"
    # In the future, we're going to submit the whole plsit, but for now...
    serial = plist['SerialNumber']
    key = plist['RecoveryKey']
    username = plist['EnabledUser']
    macname = GetMacName()
    mydata=[('serial',serial),('recovery_password',key),('username',username),
    ('macname',macname)]
    mydata=urllib.urlencode(mydata)
    cmd = ['/usr/bin/curl', '-fsSL', '--data', mydata, theurl]
    task = subprocess.Popen(cmd, stdout=subprocess.PIPE,
    stderr=subprocess.PIPE)
    (output, error) = task.communicate()
    if task.returncode == 0:
        return True
    else:
        return False

def root_read_only(filepath):
    chown_cmd = ['/usr/sbin/chown', 'root:wheel', filepath]
    chmod_cmd = ['/bin/chmod', '0400', filepath]
    subprocess.Popen(chown_cmd)
    subprocess.Popen(chmod_cmd)

def main():
    if os.path.isfile(PLIST_PATH):
        plist = FoundationPlist.readPlist(PLIST_PATH)
        escrow_result = escrow_key(plist=plist)
        if escrow_result:
            keepkey = pref('KeepKey')
            if keepkey == True:
                root_read_only(PLIST_PATH)
            else:
                os.remove(PLIST_PATH)

if __name__ == '__main__':
    main()
